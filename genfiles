#!/usr/bin/env php
<?php
/**
 * This file is part of UiKit.
 *
 * Copyright (c) Róbert Kelčák (https://kelcak.com/)
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * File for generating components.
 *
 * Usage: php genfiles component_name [type - cmp|frm]
 */

if (php_sapi_name() !== 'cli') {
    exit;
}

if (!isset($_SERVER['argv'][1])) {
    echo 'Enter component name (snake_case).';
    exit(1);
}

$type = 'frm';
if (isset($_SERVER['argv'][2])) {
    $type = in_array($_SERVER['argv'][2], ['cmp', 'frm']) ? $_SERVER['argv'][2] : 'cmp';
}

$tpl = $_SERVER['argv'][1];

$arr = [];
foreach (explode('_', $tpl) as $tpl_name) {
    $arr[] = ucfirst($tpl_name);
}

$name = implode('', $arr);

$tpl_content = '<div class="{{ class|space }}"{{ attributes|space|raw }}></div>';

$tpl_type = $type === 'cmp' ? 'components' : 'form';
file_put_contents(__DIR__.'/resources/bootstrap5/templates/twig/'.$tpl_type.'/'.$tpl.'.twig', $tpl_content);
file_put_contents(__DIR__.'/resources/semanticui2/templates/twig/'.$tpl_type.'/'.$tpl.'.twig', $tpl_content);

$class_type = '\Form;';
$class_path = 'Form/';
$namespace = PHP_EOL.PHP_EOL.'use RobiNN\UiKit\Components\Component;';
$component = '';
$return = 'form/'.$tpl.'\'';

if ($type === 'cmp') {
    $class_type = ';';
    $class_path = '';
    $namespace = '';
    $component = '
        $component = \''.$tpl.'\';

        if (!$this->checkComponent($component)) {
            return $this->noComponentMsg($component);
        }'.PHP_EOL;
    $return = 'components/\'.$component';
}

$class = '<?php
/**
 * This file is part of UiKit.
 *
 * Copyright (c) Róbert Kelčák (https://kelcak.com/)
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace RobiNN\UiKit\Components'.$class_type.$namespace.'

class '.$name.' extends Component {
    /**
     * Render '.str_replace('_', ' ', $tpl).'.
     *
     * @param array $options Additional options.
     *
     * @return string
     */
    public function render(array $options = []): string {'.$component.'
        $options = array_merge([
            \'id\'         => \'\', // Wrapper ID.
            \'class\'      => \'\', // Class for wrapper.
            \'attributes\' => [], // Array of custom attributes, set null as value for attributes without value.
        ], $options);

        return $this->uikit->renderTpl(\''.$return.', [
            \'class\'      => $options[\'class\'],
            \'attributes\' => $this->getAttributes($options[\'attributes\'], $options[\'id\']),
        ]);
    }
}
';

file_put_contents(__DIR__.'/src/Components/'.$class_path.$name.'.php', $class);

$test = '<?php
/**
 * This file is part of UiKit.
 *
 * Copyright (c) Róbert Kelčák (https://kelcak.com/)
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Tests\Components'.$class_type.'

use Tests\ComponentTestCase;

class '.$name.'Test extends ComponentTestCase {
    public function test'.$name.'Render(): void {
        $tpl = $this->uikit->'.$tpl.'->render();

        $expected = \'\';

        $this->assertComponentRenders($expected, $tpl);
    }
}
';

file_put_contents(__DIR__.'/tests/Components/'.$class_path.$name.'Test.php', $test);

echo 'Successfully generated component.';
exit(0);
